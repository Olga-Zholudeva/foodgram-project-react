name: Django-app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7
    
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        cd backend/foodgram_project_backend
        pip install -r requirements.txt
    
    - name: Test with flake8 and django tests
      run: |
        python -m flake8

  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Check out the repo
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1 
        - name: Login to Docker 
          uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKER_USERNAME }} 
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub Backend
          uses: docker/build-push-action@v2
          with:
            push: true
            context: backend/foodgram_project_backend/
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
        - name: Push to Docker Hub Frontend
          uses: docker/build-push-action@v2
          with:
            push: true
            context: ./frontend/
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            sudo docker compose pull backend
            sudo docker compose rm frontend
            sudo docker compose pull frontend
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d --build
            sudo docker compose exec -T backend python manage.py makemigrations
            sudo docker compose exec -T backend python manage.py migrate
            sudo docker compose exec -T backend python manage.py load_csv
            sudo docker compose exec -T backend python manage.py collectstatic --no-input